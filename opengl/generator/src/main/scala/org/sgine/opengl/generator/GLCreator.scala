/*
 * Created by IntelliJ IDEA.
 * User: mhicks
 * Date: 2/19/11
 * Time: 8:01 PM
 */
package org.sgine.opengl.generator

import annotation.tailrec

class GLCreator(combiner: Combiner) {
  private var glBuilder = new StringBuilder()
  private var lwjglBuilder = new StringBuilder()
  private var androidBuilder = new StringBuilder()
  private var b = glBuilder

  def gl() = b = glBuilder
  def android() = b = androidBuilder
  def lwjgl() = b = lwjglBuilder

  private var first = true

  val string = create()

  private def create() = {
    b.clear()

    this % "package org.sgine.opengl"
    nl()
    docStart(0)
    doc("Generated by org.sgine.opengl.generator.Generator", 0)
    doc(tabs = 0)
    doc("Documentation information pulled from <a href=\"http://www.opengl.org/sdk/docs/man/\">http://www.opengl.org/sdk/docs/man/</a>.", 0)
    doc(tabs = 0)
    doc("@see org.sgine.opengl.generator.Generator", 0)
    docEnd(0)
    this % "trait GL {"
    first = true
    combiner.methods.foreach(writeMethods)
    this % "}"
    nl()
    this % "object GL extends GL {"
    first = true
    combiner.fields.foreach(writeField)
    combiner.methods.foreach(writeMethodsWrapper)
    this + "}"

    b.toString
  }

  private def +(s: String) = b.append(s)

  private def %(s: String) = {
    this + s
    nl()
  }

  @tailrec
  private def nl(count: Int = 1): Unit = {
    if (count > 0) {
      this + "\r\n"
      nl(count - 1)
    }
  }

  @tailrec
  private def tab(count: Int = 1): Unit = {
    if (count > 0) {
      this + "\t"
      tab(count - 1)
    }
  }

  private def docStart(tabs: Int = 1) = {
    tab(tabs)
    this % "/**"
  }

  private def doc(s: String = "", tabs: Int = 1) = {
    tab(tabs)
    this + " * "
    this % s
  }

  private def docEnd(tabs: Int = 1) = {
    tab(tabs)
    this % " */"
  }

  private def writeField(field: CombinedField) = {
    if (first) {
      first = false
    } else {
      nl()
    }
    docStart()
    doc("Constant Value: " + field.value.toString)
    doc()
    doc("@see " + field.leftOrigin.getDeclaringClass.getName + "#" + field.name)
    doc("@see " + field.rightOrigin.getDeclaringClass.getName + "#" + field.name)
    docEnd()
    tab()
    this + "val "
    this + field.name
    this + ": "
    this + Generator.convertClass(field.fieldType)
    this + " = "
    this % field.value.toString
  }

  private def writeMethods(method: CombinedMethods) = {
    if (first) {
      first = false
    } else {
      nl()
    }
    docStart()
    docEnd()
    tab()
    this + "def "
    this + method.name
    this + "("
    this + "): Unit"
    nl()
  }

  private def writeMethodsWrapper(method: CombinedMethods) = {
    nl()
    tab()
    this + "def "
    this + method.name
    this + "("
    this + "): Unit = {"
    nl()
    tab()
    this + "}"
    nl()
  }
}